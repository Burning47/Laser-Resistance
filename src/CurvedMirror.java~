import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;

/**
 * The "CurvedMirror" class, a convex shaped mirror (inside of a ricle) which also has the ability to reflect lasers by creating a new laser based on where the old laser hit the mirror, and at what angle.
 * 
 * @author Erik Trinh
 * @version V1.0.0, 10 June, 2014
 */
public class CurvedMirror extends Mirror
{
  /**
   * Private Ellipse2D for the circle collision object of this object.
   */
  private Ellipse2D circle;
  /**
   * Private boolean for which side is the reflective side of this mirror, true for left, false for right.
   */
  private boolean reflectSide;
  /**
   * Private int for the radius of the circle.
   */
  private int radius;
  /**
   * Private int for the x-coord of the centre of the circle.
   */
  private int centreX;
  /**
   * Private int for the y-coord of the centre of the circle.
   */
  private int centreY;
  
  /**
   * A constructor for the class, sets the x-coord, y-coord, width, height, side which is reflective. Also sets up the Ellipse2D or circle, and calculates the centre of it, and the radius.
   * 
   * @param x int for the x-coord.
   * @param y int for the y-coord.
   * @param width int for the width.
   * @param height int for the height.
   * @param side boolean for which side is reflective, false for right, true for left.
   */
  public CurvedMirror (int x, int y, int width, int height, boolean side, BufferedImage icon)
  {
    super (x, y, width, height, icon);
    reflectSide = side;
    circle = new Ellipse2D.Double (getX (), getY (), getWidth (), getHeight ()); 
    radius = getWidth () / 2;
    centreX = (2 * getX () + getWidth ()) / 2;
    centreY = (2 * getY () + getHeight ()) / 2;
  }
  
  /**
   * Returns a new reflected laser with a starting point of the old laser's ending point, and a new angle calculated on the slope of the tangent the old laser hit the mirror at, and the old laser's angle.
   * 
   * @param laser Laser which hit the mirror, which this function will create a reflected laser of
   * @return a new reflected laser with newly calculated angle and starting coordinates.
   */
  public Laser reflect (Laser laser)
  {
    int mirrorAngle = slopeToAngle (findTangentSlope (laser.getY2 ()));
    return new Laser ((int) findXCoord (laser.getY2 ()-1), laser.getY2 ()-1, 2 * mirrorAngle - laser.getAngle ());
  }
  
  /**
   * Returns the radius.
   * 
   * @return integer of the radius.
   */
  public int getRadius ()
  {
    return radius;
  }
  
  /**
   * Returns the x component of the centre of the circle.
   * 
   * @return integer of the x component of the centre of the circle.
   */
  public int getCentreX ()
  {
    return centreX;
  }
  
  /**
   * Returns the y component of the centre of the circle.
   * 
   * @return integer of the y component of the centre of the circle.
   */
  public int getCentreY ()
  {
    return centreY;
  }
  
  /**
   * Returns the Ellipse2D of this object.
   * 
   * @return the Ellipse2D of this object.
   */
  public Ellipse2D getCircle ()
  {
    return circle;
  }
  
  /**
   * Returns a boolean for which side is reflective, false for right side, true for left side.
   * 
   * @return boolean for which side is reflective, false for right side, true for left side.
   */
  public boolean getReflectSide ()
  {
    return reflectSide;
  }
  
  /**
   * Returns the x-coordinate of this mirror given the y-coordinate.
   * 
   * @param y double for the y-coordinate used to find the corresponding x-coordinate of this circle/mirror.
   * @param temp double, temporary value used to calculation of the y-coordinate. 
   * @return the double value of the x-coordinate corresponding to this y-coordinate.
   */
  public double findXCoord (double y)
  {
    double temp = Math.sqrt (Math.pow ((double) radius, 2) - Math.pow (y - centreY, 2));
    if (reflectSide == false)
      temp += centreX;
    else
      temp = temp * (-1) + centreX;
    return temp;
  }
  
  /**
   * Returns the slope of the tangent of this circle at point (x, y), where the y value is specified.
   * 
   * @param y int for the y-component of the point to find the slope of the tangent at.
   * @return a double representing the slope of the tangent at the point.
   */
  public double findTangentSlope (int y)
  {
    return (-0.002) / (findXCoord (y + 0.001)-findXCoord (y - 0.001));
  }
  
  /**
   * Returns the integer of the angle value (in degrees with up/forward/north being 0, and going clockwise) of a slope of a line.
   * 
   * @param slope double, stores the slope of the line used to calculate the angle. 
   * @param angle int, stores the calculation of the angle.
   * @return angle int, the angle calculated that will be return.
   */
  public int slopeToAngle (double slope)
  {
    int angle = (int) (Math.toDegrees (Math.atan (slope)));
    if (angle >= 0)
      angle = 90 - angle;
    else
      angle = 90 + angle * (-1);
    return angle;
  }
  
  /**
   * Checks if this point is found in the Ellipse2D or circle. Returns true if it is, and false if it is not.
   * 
   * @param point the Point2D to be checked.
   * @return true if the point is contained in the Ellipse, false if not.
   */
  public boolean contains (Point2D point)
  {
    return circle.contains (point);
  }
}